// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/hoge"
	"entgo.io/bug/ent/hogeadministrator"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HogeUpdate is the builder for updating Hoge entities.
type HogeUpdate struct {
	config
	hooks    []Hook
	mutation *HogeMutation
}

// Where appends a list predicates to the HogeUpdate builder.
func (hu *HogeUpdate) Where(ps ...predicate.Hoge) *HogeUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HogeUpdate) SetUpdatedAt(t time.Time) *HogeUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetName sets the "name" field.
func (hu *HogeUpdate) SetName(s string) *HogeUpdate {
	hu.mutation.SetName(s)
	return hu
}

// AddHogeAdministratorIDs adds the "hoge_administrators" edge to the HogeAdministrator entity by IDs.
func (hu *HogeUpdate) AddHogeAdministratorIDs(ids ...ulid.ID) *HogeUpdate {
	hu.mutation.AddHogeAdministratorIDs(ids...)
	return hu
}

// AddHogeAdministrators adds the "hoge_administrators" edges to the HogeAdministrator entity.
func (hu *HogeUpdate) AddHogeAdministrators(h ...*HogeAdministrator) *HogeUpdate {
	ids := make([]ulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddHogeAdministratorIDs(ids...)
}

// Mutation returns the HogeMutation object of the builder.
func (hu *HogeUpdate) Mutation() *HogeMutation {
	return hu.mutation
}

// ClearHogeAdministrators clears all "hoge_administrators" edges to the HogeAdministrator entity.
func (hu *HogeUpdate) ClearHogeAdministrators() *HogeUpdate {
	hu.mutation.ClearHogeAdministrators()
	return hu
}

// RemoveHogeAdministratorIDs removes the "hoge_administrators" edge to HogeAdministrator entities by IDs.
func (hu *HogeUpdate) RemoveHogeAdministratorIDs(ids ...ulid.ID) *HogeUpdate {
	hu.mutation.RemoveHogeAdministratorIDs(ids...)
	return hu
}

// RemoveHogeAdministrators removes "hoge_administrators" edges to HogeAdministrator entities.
func (hu *HogeUpdate) RemoveHogeAdministrators(h ...*HogeAdministrator) *HogeUpdate {
	ids := make([]ulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveHogeAdministratorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HogeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hu.defaults()
	if len(hu.hooks) == 0 {
		if err = hu.check(); err != nil {
			return 0, err
		}
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HogeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hu.check(); err != nil {
				return 0, err
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HogeUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HogeUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HogeUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HogeUpdate) defaults() {
	if _, ok := hu.mutation.UpdatedAt(); !ok {
		v := hoge.UpdateDefaultUpdatedAt()
		hu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HogeUpdate) check() error {
	if v, ok := hu.mutation.Name(); ok {
		if err := hoge.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Hoge.name": %w`, err)}
		}
	}
	return nil
}

func (hu *HogeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hoge.Table,
			Columns: hoge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hoge.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hoge.FieldUpdatedAt,
		})
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hoge.FieldName,
		})
	}
	if hu.mutation.HogeAdministratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hoge.HogeAdministratorsTable,
			Columns: []string{hoge.HogeAdministratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hogeadministrator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedHogeAdministratorsIDs(); len(nodes) > 0 && !hu.mutation.HogeAdministratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hoge.HogeAdministratorsTable,
			Columns: []string{hoge.HogeAdministratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hogeadministrator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HogeAdministratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hoge.HogeAdministratorsTable,
			Columns: []string{hoge.HogeAdministratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hogeadministrator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hoge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HogeUpdateOne is the builder for updating a single Hoge entity.
type HogeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HogeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HogeUpdateOne) SetUpdatedAt(t time.Time) *HogeUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetName sets the "name" field.
func (huo *HogeUpdateOne) SetName(s string) *HogeUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// AddHogeAdministratorIDs adds the "hoge_administrators" edge to the HogeAdministrator entity by IDs.
func (huo *HogeUpdateOne) AddHogeAdministratorIDs(ids ...ulid.ID) *HogeUpdateOne {
	huo.mutation.AddHogeAdministratorIDs(ids...)
	return huo
}

// AddHogeAdministrators adds the "hoge_administrators" edges to the HogeAdministrator entity.
func (huo *HogeUpdateOne) AddHogeAdministrators(h ...*HogeAdministrator) *HogeUpdateOne {
	ids := make([]ulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddHogeAdministratorIDs(ids...)
}

// Mutation returns the HogeMutation object of the builder.
func (huo *HogeUpdateOne) Mutation() *HogeMutation {
	return huo.mutation
}

// ClearHogeAdministrators clears all "hoge_administrators" edges to the HogeAdministrator entity.
func (huo *HogeUpdateOne) ClearHogeAdministrators() *HogeUpdateOne {
	huo.mutation.ClearHogeAdministrators()
	return huo
}

// RemoveHogeAdministratorIDs removes the "hoge_administrators" edge to HogeAdministrator entities by IDs.
func (huo *HogeUpdateOne) RemoveHogeAdministratorIDs(ids ...ulid.ID) *HogeUpdateOne {
	huo.mutation.RemoveHogeAdministratorIDs(ids...)
	return huo
}

// RemoveHogeAdministrators removes "hoge_administrators" edges to HogeAdministrator entities.
func (huo *HogeUpdateOne) RemoveHogeAdministrators(h ...*HogeAdministrator) *HogeUpdateOne {
	ids := make([]ulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveHogeAdministratorIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HogeUpdateOne) Select(field string, fields ...string) *HogeUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hoge entity.
func (huo *HogeUpdateOne) Save(ctx context.Context) (*Hoge, error) {
	var (
		err  error
		node *Hoge
	)
	huo.defaults()
	if len(huo.hooks) == 0 {
		if err = huo.check(); err != nil {
			return nil, err
		}
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HogeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = huo.check(); err != nil {
				return nil, err
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, huo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Hoge)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HogeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HogeUpdateOne) SaveX(ctx context.Context) *Hoge {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HogeUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HogeUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HogeUpdateOne) defaults() {
	if _, ok := huo.mutation.UpdatedAt(); !ok {
		v := hoge.UpdateDefaultUpdatedAt()
		huo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HogeUpdateOne) check() error {
	if v, ok := huo.mutation.Name(); ok {
		if err := hoge.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Hoge.name": %w`, err)}
		}
	}
	return nil
}

func (huo *HogeUpdateOne) sqlSave(ctx context.Context) (_node *Hoge, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hoge.Table,
			Columns: hoge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hoge.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hoge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hoge.FieldID)
		for _, f := range fields {
			if !hoge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hoge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hoge.FieldUpdatedAt,
		})
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hoge.FieldName,
		})
	}
	if huo.mutation.HogeAdministratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hoge.HogeAdministratorsTable,
			Columns: []string{hoge.HogeAdministratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hogeadministrator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedHogeAdministratorsIDs(); len(nodes) > 0 && !huo.mutation.HogeAdministratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hoge.HogeAdministratorsTable,
			Columns: []string{hoge.HogeAdministratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hogeadministrator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HogeAdministratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hoge.HogeAdministratorsTable,
			Columns: []string{hoge.HogeAdministratorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hogeadministrator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hoge{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hoge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
