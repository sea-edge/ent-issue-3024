// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/hoge"
	"entgo.io/bug/ent/hogeadministrator"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HogeAdministratorUpdate is the builder for updating HogeAdministrator entities.
type HogeAdministratorUpdate struct {
	config
	hooks    []Hook
	mutation *HogeAdministratorMutation
}

// Where appends a list predicates to the HogeAdministratorUpdate builder.
func (hau *HogeAdministratorUpdate) Where(ps ...predicate.HogeAdministrator) *HogeAdministratorUpdate {
	hau.mutation.Where(ps...)
	return hau
}

// SetUpdatedAt sets the "updated_at" field.
func (hau *HogeAdministratorUpdate) SetUpdatedAt(t time.Time) *HogeAdministratorUpdate {
	hau.mutation.SetUpdatedAt(t)
	return hau
}

// SetFirstName sets the "first_name" field.
func (hau *HogeAdministratorUpdate) SetFirstName(s string) *HogeAdministratorUpdate {
	hau.mutation.SetFirstName(s)
	return hau
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (hau *HogeAdministratorUpdate) SetNillableFirstName(s *string) *HogeAdministratorUpdate {
	if s != nil {
		hau.SetFirstName(*s)
	}
	return hau
}

// ClearFirstName clears the value of the "first_name" field.
func (hau *HogeAdministratorUpdate) ClearFirstName() *HogeAdministratorUpdate {
	hau.mutation.ClearFirstName()
	return hau
}

// SetLastName sets the "last_name" field.
func (hau *HogeAdministratorUpdate) SetLastName(s string) *HogeAdministratorUpdate {
	hau.mutation.SetLastName(s)
	return hau
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (hau *HogeAdministratorUpdate) SetNillableLastName(s *string) *HogeAdministratorUpdate {
	if s != nil {
		hau.SetLastName(*s)
	}
	return hau
}

// ClearLastName clears the value of the "last_name" field.
func (hau *HogeAdministratorUpdate) ClearLastName() *HogeAdministratorUpdate {
	hau.mutation.ClearLastName()
	return hau
}

// SetEmail sets the "email" field.
func (hau *HogeAdministratorUpdate) SetEmail(s string) *HogeAdministratorUpdate {
	hau.mutation.SetEmail(s)
	return hau
}

// SetIsActive sets the "is_active" field.
func (hau *HogeAdministratorUpdate) SetIsActive(b bool) *HogeAdministratorUpdate {
	hau.mutation.SetIsActive(b)
	return hau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (hau *HogeAdministratorUpdate) SetNillableIsActive(b *bool) *HogeAdministratorUpdate {
	if b != nil {
		hau.SetIsActive(*b)
	}
	return hau
}

// SetHogeID sets the "hoge" edge to the Hoge entity by ID.
func (hau *HogeAdministratorUpdate) SetHogeID(id ulid.ID) *HogeAdministratorUpdate {
	hau.mutation.SetHogeID(id)
	return hau
}

// SetNillableHogeID sets the "hoge" edge to the Hoge entity by ID if the given value is not nil.
func (hau *HogeAdministratorUpdate) SetNillableHogeID(id *ulid.ID) *HogeAdministratorUpdate {
	if id != nil {
		hau = hau.SetHogeID(*id)
	}
	return hau
}

// SetHoge sets the "hoge" edge to the Hoge entity.
func (hau *HogeAdministratorUpdate) SetHoge(h *Hoge) *HogeAdministratorUpdate {
	return hau.SetHogeID(h.ID)
}

// Mutation returns the HogeAdministratorMutation object of the builder.
func (hau *HogeAdministratorUpdate) Mutation() *HogeAdministratorMutation {
	return hau.mutation
}

// ClearHoge clears the "hoge" edge to the Hoge entity.
func (hau *HogeAdministratorUpdate) ClearHoge() *HogeAdministratorUpdate {
	hau.mutation.ClearHoge()
	return hau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hau *HogeAdministratorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	hau.defaults()
	if len(hau.hooks) == 0 {
		if err = hau.check(); err != nil {
			return 0, err
		}
		affected, err = hau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HogeAdministratorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hau.check(); err != nil {
				return 0, err
			}
			hau.mutation = mutation
			affected, err = hau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hau.hooks) - 1; i >= 0; i-- {
			if hau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hau *HogeAdministratorUpdate) SaveX(ctx context.Context) int {
	affected, err := hau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hau *HogeAdministratorUpdate) Exec(ctx context.Context) error {
	_, err := hau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hau *HogeAdministratorUpdate) ExecX(ctx context.Context) {
	if err := hau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hau *HogeAdministratorUpdate) defaults() {
	if _, ok := hau.mutation.UpdatedAt(); !ok {
		v := hogeadministrator.UpdateDefaultUpdatedAt()
		hau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hau *HogeAdministratorUpdate) check() error {
	if v, ok := hau.mutation.FirstName(); ok {
		if err := hogeadministrator.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "HogeAdministrator.first_name": %w`, err)}
		}
	}
	if v, ok := hau.mutation.LastName(); ok {
		if err := hogeadministrator.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "HogeAdministrator.last_name": %w`, err)}
		}
	}
	if v, ok := hau.mutation.Email(); ok {
		if err := hogeadministrator.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "HogeAdministrator.email": %w`, err)}
		}
	}
	return nil
}

func (hau *HogeAdministratorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hogeadministrator.Table,
			Columns: hogeadministrator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hogeadministrator.FieldID,
			},
		},
	}
	if ps := hau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hogeadministrator.FieldUpdatedAt,
		})
	}
	if value, ok := hau.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hogeadministrator.FieldFirstName,
		})
	}
	if hau.mutation.FirstNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hogeadministrator.FieldFirstName,
		})
	}
	if value, ok := hau.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hogeadministrator.FieldLastName,
		})
	}
	if hau.mutation.LastNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hogeadministrator.FieldLastName,
		})
	}
	if value, ok := hau.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hogeadministrator.FieldEmail,
		})
	}
	if value, ok := hau.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: hogeadministrator.FieldIsActive,
		})
	}
	if hau.mutation.HogeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hogeadministrator.HogeTable,
			Columns: []string{hogeadministrator.HogeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hoge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hau.mutation.HogeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hogeadministrator.HogeTable,
			Columns: []string{hogeadministrator.HogeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hoge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hogeadministrator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HogeAdministratorUpdateOne is the builder for updating a single HogeAdministrator entity.
type HogeAdministratorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HogeAdministratorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hauo *HogeAdministratorUpdateOne) SetUpdatedAt(t time.Time) *HogeAdministratorUpdateOne {
	hauo.mutation.SetUpdatedAt(t)
	return hauo
}

// SetFirstName sets the "first_name" field.
func (hauo *HogeAdministratorUpdateOne) SetFirstName(s string) *HogeAdministratorUpdateOne {
	hauo.mutation.SetFirstName(s)
	return hauo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (hauo *HogeAdministratorUpdateOne) SetNillableFirstName(s *string) *HogeAdministratorUpdateOne {
	if s != nil {
		hauo.SetFirstName(*s)
	}
	return hauo
}

// ClearFirstName clears the value of the "first_name" field.
func (hauo *HogeAdministratorUpdateOne) ClearFirstName() *HogeAdministratorUpdateOne {
	hauo.mutation.ClearFirstName()
	return hauo
}

// SetLastName sets the "last_name" field.
func (hauo *HogeAdministratorUpdateOne) SetLastName(s string) *HogeAdministratorUpdateOne {
	hauo.mutation.SetLastName(s)
	return hauo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (hauo *HogeAdministratorUpdateOne) SetNillableLastName(s *string) *HogeAdministratorUpdateOne {
	if s != nil {
		hauo.SetLastName(*s)
	}
	return hauo
}

// ClearLastName clears the value of the "last_name" field.
func (hauo *HogeAdministratorUpdateOne) ClearLastName() *HogeAdministratorUpdateOne {
	hauo.mutation.ClearLastName()
	return hauo
}

// SetEmail sets the "email" field.
func (hauo *HogeAdministratorUpdateOne) SetEmail(s string) *HogeAdministratorUpdateOne {
	hauo.mutation.SetEmail(s)
	return hauo
}

// SetIsActive sets the "is_active" field.
func (hauo *HogeAdministratorUpdateOne) SetIsActive(b bool) *HogeAdministratorUpdateOne {
	hauo.mutation.SetIsActive(b)
	return hauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (hauo *HogeAdministratorUpdateOne) SetNillableIsActive(b *bool) *HogeAdministratorUpdateOne {
	if b != nil {
		hauo.SetIsActive(*b)
	}
	return hauo
}

// SetHogeID sets the "hoge" edge to the Hoge entity by ID.
func (hauo *HogeAdministratorUpdateOne) SetHogeID(id ulid.ID) *HogeAdministratorUpdateOne {
	hauo.mutation.SetHogeID(id)
	return hauo
}

// SetNillableHogeID sets the "hoge" edge to the Hoge entity by ID if the given value is not nil.
func (hauo *HogeAdministratorUpdateOne) SetNillableHogeID(id *ulid.ID) *HogeAdministratorUpdateOne {
	if id != nil {
		hauo = hauo.SetHogeID(*id)
	}
	return hauo
}

// SetHoge sets the "hoge" edge to the Hoge entity.
func (hauo *HogeAdministratorUpdateOne) SetHoge(h *Hoge) *HogeAdministratorUpdateOne {
	return hauo.SetHogeID(h.ID)
}

// Mutation returns the HogeAdministratorMutation object of the builder.
func (hauo *HogeAdministratorUpdateOne) Mutation() *HogeAdministratorMutation {
	return hauo.mutation
}

// ClearHoge clears the "hoge" edge to the Hoge entity.
func (hauo *HogeAdministratorUpdateOne) ClearHoge() *HogeAdministratorUpdateOne {
	hauo.mutation.ClearHoge()
	return hauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hauo *HogeAdministratorUpdateOne) Select(field string, fields ...string) *HogeAdministratorUpdateOne {
	hauo.fields = append([]string{field}, fields...)
	return hauo
}

// Save executes the query and returns the updated HogeAdministrator entity.
func (hauo *HogeAdministratorUpdateOne) Save(ctx context.Context) (*HogeAdministrator, error) {
	var (
		err  error
		node *HogeAdministrator
	)
	hauo.defaults()
	if len(hauo.hooks) == 0 {
		if err = hauo.check(); err != nil {
			return nil, err
		}
		node, err = hauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HogeAdministratorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hauo.check(); err != nil {
				return nil, err
			}
			hauo.mutation = mutation
			node, err = hauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hauo.hooks) - 1; i >= 0; i-- {
			if hauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HogeAdministrator)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HogeAdministratorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hauo *HogeAdministratorUpdateOne) SaveX(ctx context.Context) *HogeAdministrator {
	node, err := hauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hauo *HogeAdministratorUpdateOne) Exec(ctx context.Context) error {
	_, err := hauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hauo *HogeAdministratorUpdateOne) ExecX(ctx context.Context) {
	if err := hauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hauo *HogeAdministratorUpdateOne) defaults() {
	if _, ok := hauo.mutation.UpdatedAt(); !ok {
		v := hogeadministrator.UpdateDefaultUpdatedAt()
		hauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hauo *HogeAdministratorUpdateOne) check() error {
	if v, ok := hauo.mutation.FirstName(); ok {
		if err := hogeadministrator.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "HogeAdministrator.first_name": %w`, err)}
		}
	}
	if v, ok := hauo.mutation.LastName(); ok {
		if err := hogeadministrator.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "HogeAdministrator.last_name": %w`, err)}
		}
	}
	if v, ok := hauo.mutation.Email(); ok {
		if err := hogeadministrator.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "HogeAdministrator.email": %w`, err)}
		}
	}
	return nil
}

func (hauo *HogeAdministratorUpdateOne) sqlSave(ctx context.Context) (_node *HogeAdministrator, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hogeadministrator.Table,
			Columns: hogeadministrator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hogeadministrator.FieldID,
			},
		},
	}
	id, ok := hauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HogeAdministrator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hogeadministrator.FieldID)
		for _, f := range fields {
			if !hogeadministrator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hogeadministrator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: hogeadministrator.FieldUpdatedAt,
		})
	}
	if value, ok := hauo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hogeadministrator.FieldFirstName,
		})
	}
	if hauo.mutation.FirstNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hogeadministrator.FieldFirstName,
		})
	}
	if value, ok := hauo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hogeadministrator.FieldLastName,
		})
	}
	if hauo.mutation.LastNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: hogeadministrator.FieldLastName,
		})
	}
	if value, ok := hauo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hogeadministrator.FieldEmail,
		})
	}
	if value, ok := hauo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: hogeadministrator.FieldIsActive,
		})
	}
	if hauo.mutation.HogeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hogeadministrator.HogeTable,
			Columns: []string{hogeadministrator.HogeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hoge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hauo.mutation.HogeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hogeadministrator.HogeTable,
			Columns: []string{hogeadministrator.HogeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: hoge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HogeAdministrator{config: hauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hogeadministrator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
