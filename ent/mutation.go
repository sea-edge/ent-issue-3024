// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/bug/ent/hoge"
	"entgo.io/bug/ent/hogeadministrator"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ulid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHoge              = "Hoge"
	TypeHogeAdministrator = "HogeAdministrator"
)

// HogeMutation represents an operation that mutates the Hoge nodes in the graph.
type HogeMutation struct {
	config
	op                         Op
	typ                        string
	id                         *ulid.ID
	created_at                 *time.Time
	updated_at                 *time.Time
	name                       *string
	clearedFields              map[string]struct{}
	hoge_administrators        map[ulid.ID]struct{}
	removedhoge_administrators map[ulid.ID]struct{}
	clearedhoge_administrators bool
	done                       bool
	oldValue                   func(context.Context) (*Hoge, error)
	predicates                 []predicate.Hoge
}

var _ ent.Mutation = (*HogeMutation)(nil)

// hogeOption allows management of the mutation configuration using functional options.
type hogeOption func(*HogeMutation)

// newHogeMutation creates new mutation for the Hoge entity.
func newHogeMutation(c config, op Op, opts ...hogeOption) *HogeMutation {
	m := &HogeMutation{
		config:        c,
		op:            op,
		typ:           TypeHoge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHogeID sets the ID field of the mutation.
func withHogeID(id ulid.ID) hogeOption {
	return func(m *HogeMutation) {
		var (
			err   error
			once  sync.Once
			value *Hoge
		)
		m.oldValue = func(ctx context.Context) (*Hoge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hoge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHoge sets the old Hoge of the mutation.
func withHoge(node *Hoge) hogeOption {
	return func(m *HogeMutation) {
		m.oldValue = func(context.Context) (*Hoge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HogeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HogeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Hoge entities.
func (m *HogeMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HogeMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HogeMutation) IDs(ctx context.Context) ([]ulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []ulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hoge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *HogeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HogeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Hoge entity.
// If the Hoge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HogeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *HogeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *HogeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Hoge entity.
// If the Hoge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *HogeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *HogeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HogeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Hoge entity.
// If the Hoge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HogeMutation) ResetName() {
	m.name = nil
}

// AddHogeAdministratorIDs adds the "hoge_administrators" edge to the HogeAdministrator entity by ids.
func (m *HogeMutation) AddHogeAdministratorIDs(ids ...ulid.ID) {
	if m.hoge_administrators == nil {
		m.hoge_administrators = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		m.hoge_administrators[ids[i]] = struct{}{}
	}
}

// ClearHogeAdministrators clears the "hoge_administrators" edge to the HogeAdministrator entity.
func (m *HogeMutation) ClearHogeAdministrators() {
	m.clearedhoge_administrators = true
}

// HogeAdministratorsCleared reports if the "hoge_administrators" edge to the HogeAdministrator entity was cleared.
func (m *HogeMutation) HogeAdministratorsCleared() bool {
	return m.clearedhoge_administrators
}

// RemoveHogeAdministratorIDs removes the "hoge_administrators" edge to the HogeAdministrator entity by IDs.
func (m *HogeMutation) RemoveHogeAdministratorIDs(ids ...ulid.ID) {
	if m.removedhoge_administrators == nil {
		m.removedhoge_administrators = make(map[ulid.ID]struct{})
	}
	for i := range ids {
		delete(m.hoge_administrators, ids[i])
		m.removedhoge_administrators[ids[i]] = struct{}{}
	}
}

// RemovedHogeAdministrators returns the removed IDs of the "hoge_administrators" edge to the HogeAdministrator entity.
func (m *HogeMutation) RemovedHogeAdministratorsIDs() (ids []ulid.ID) {
	for id := range m.removedhoge_administrators {
		ids = append(ids, id)
	}
	return
}

// HogeAdministratorsIDs returns the "hoge_administrators" edge IDs in the mutation.
func (m *HogeMutation) HogeAdministratorsIDs() (ids []ulid.ID) {
	for id := range m.hoge_administrators {
		ids = append(ids, id)
	}
	return
}

// ResetHogeAdministrators resets all changes to the "hoge_administrators" edge.
func (m *HogeMutation) ResetHogeAdministrators() {
	m.hoge_administrators = nil
	m.clearedhoge_administrators = false
	m.removedhoge_administrators = nil
}

// Where appends a list predicates to the HogeMutation builder.
func (m *HogeMutation) Where(ps ...predicate.Hoge) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HogeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Hoge).
func (m *HogeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HogeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, hoge.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, hoge.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, hoge.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HogeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hoge.FieldCreatedAt:
		return m.CreatedAt()
	case hoge.FieldUpdatedAt:
		return m.UpdatedAt()
	case hoge.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HogeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hoge.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case hoge.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case hoge.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Hoge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HogeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hoge.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case hoge.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case hoge.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Hoge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HogeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HogeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HogeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Hoge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HogeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HogeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HogeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hoge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HogeMutation) ResetField(name string) error {
	switch name {
	case hoge.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case hoge.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case hoge.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Hoge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HogeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.hoge_administrators != nil {
		edges = append(edges, hoge.EdgeHogeAdministrators)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HogeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hoge.EdgeHogeAdministrators:
		ids := make([]ent.Value, 0, len(m.hoge_administrators))
		for id := range m.hoge_administrators {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HogeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedhoge_administrators != nil {
		edges = append(edges, hoge.EdgeHogeAdministrators)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HogeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hoge.EdgeHogeAdministrators:
		ids := make([]ent.Value, 0, len(m.removedhoge_administrators))
		for id := range m.removedhoge_administrators {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HogeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhoge_administrators {
		edges = append(edges, hoge.EdgeHogeAdministrators)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HogeMutation) EdgeCleared(name string) bool {
	switch name {
	case hoge.EdgeHogeAdministrators:
		return m.clearedhoge_administrators
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HogeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Hoge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HogeMutation) ResetEdge(name string) error {
	switch name {
	case hoge.EdgeHogeAdministrators:
		m.ResetHogeAdministrators()
		return nil
	}
	return fmt.Errorf("unknown Hoge edge %s", name)
}

// HogeAdministratorMutation represents an operation that mutates the HogeAdministrator nodes in the graph.
type HogeAdministratorMutation struct {
	config
	op            Op
	typ           string
	id            *ulid.ID
	created_at    *time.Time
	updated_at    *time.Time
	first_name    *string
	last_name     *string
	email         *string
	is_active     *bool
	clearedFields map[string]struct{}
	hoge          *ulid.ID
	clearedhoge   bool
	done          bool
	oldValue      func(context.Context) (*HogeAdministrator, error)
	predicates    []predicate.HogeAdministrator
}

var _ ent.Mutation = (*HogeAdministratorMutation)(nil)

// hogeadministratorOption allows management of the mutation configuration using functional options.
type hogeadministratorOption func(*HogeAdministratorMutation)

// newHogeAdministratorMutation creates new mutation for the HogeAdministrator entity.
func newHogeAdministratorMutation(c config, op Op, opts ...hogeadministratorOption) *HogeAdministratorMutation {
	m := &HogeAdministratorMutation{
		config:        c,
		op:            op,
		typ:           TypeHogeAdministrator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHogeAdministratorID sets the ID field of the mutation.
func withHogeAdministratorID(id ulid.ID) hogeadministratorOption {
	return func(m *HogeAdministratorMutation) {
		var (
			err   error
			once  sync.Once
			value *HogeAdministrator
		)
		m.oldValue = func(ctx context.Context) (*HogeAdministrator, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HogeAdministrator.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHogeAdministrator sets the old HogeAdministrator of the mutation.
func withHogeAdministrator(node *HogeAdministrator) hogeadministratorOption {
	return func(m *HogeAdministratorMutation) {
		m.oldValue = func(context.Context) (*HogeAdministrator, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HogeAdministratorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HogeAdministratorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HogeAdministrator entities.
func (m *HogeAdministratorMutation) SetID(id ulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HogeAdministratorMutation) ID() (id ulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HogeAdministratorMutation) IDs(ctx context.Context) ([]ulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []ulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HogeAdministrator.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *HogeAdministratorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HogeAdministratorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the HogeAdministrator entity.
// If the HogeAdministrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeAdministratorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HogeAdministratorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *HogeAdministratorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *HogeAdministratorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the HogeAdministrator entity.
// If the HogeAdministrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeAdministratorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *HogeAdministratorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetFirstName sets the "first_name" field.
func (m *HogeAdministratorMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *HogeAdministratorMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the HogeAdministrator entity.
// If the HogeAdministrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeAdministratorMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *HogeAdministratorMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[hogeadministrator.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *HogeAdministratorMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[hogeadministrator.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *HogeAdministratorMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, hogeadministrator.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *HogeAdministratorMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *HogeAdministratorMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the HogeAdministrator entity.
// If the HogeAdministrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeAdministratorMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *HogeAdministratorMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[hogeadministrator.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *HogeAdministratorMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[hogeadministrator.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *HogeAdministratorMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, hogeadministrator.FieldLastName)
}

// SetEmail sets the "email" field.
func (m *HogeAdministratorMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *HogeAdministratorMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the HogeAdministrator entity.
// If the HogeAdministrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeAdministratorMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *HogeAdministratorMutation) ResetEmail() {
	m.email = nil
}

// SetIsActive sets the "is_active" field.
func (m *HogeAdministratorMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *HogeAdministratorMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the HogeAdministrator entity.
// If the HogeAdministrator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HogeAdministratorMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *HogeAdministratorMutation) ResetIsActive() {
	m.is_active = nil
}

// SetHogeID sets the "hoge" edge to the Hoge entity by id.
func (m *HogeAdministratorMutation) SetHogeID(id ulid.ID) {
	m.hoge = &id
}

// ClearHoge clears the "hoge" edge to the Hoge entity.
func (m *HogeAdministratorMutation) ClearHoge() {
	m.clearedhoge = true
}

// HogeCleared reports if the "hoge" edge to the Hoge entity was cleared.
func (m *HogeAdministratorMutation) HogeCleared() bool {
	return m.clearedhoge
}

// HogeID returns the "hoge" edge ID in the mutation.
func (m *HogeAdministratorMutation) HogeID() (id ulid.ID, exists bool) {
	if m.hoge != nil {
		return *m.hoge, true
	}
	return
}

// HogeIDs returns the "hoge" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HogeID instead. It exists only for internal usage by the builders.
func (m *HogeAdministratorMutation) HogeIDs() (ids []ulid.ID) {
	if id := m.hoge; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHoge resets all changes to the "hoge" edge.
func (m *HogeAdministratorMutation) ResetHoge() {
	m.hoge = nil
	m.clearedhoge = false
}

// Where appends a list predicates to the HogeAdministratorMutation builder.
func (m *HogeAdministratorMutation) Where(ps ...predicate.HogeAdministrator) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HogeAdministratorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (HogeAdministrator).
func (m *HogeAdministratorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HogeAdministratorMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, hogeadministrator.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, hogeadministrator.FieldUpdatedAt)
	}
	if m.first_name != nil {
		fields = append(fields, hogeadministrator.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, hogeadministrator.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, hogeadministrator.FieldEmail)
	}
	if m.is_active != nil {
		fields = append(fields, hogeadministrator.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HogeAdministratorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hogeadministrator.FieldCreatedAt:
		return m.CreatedAt()
	case hogeadministrator.FieldUpdatedAt:
		return m.UpdatedAt()
	case hogeadministrator.FieldFirstName:
		return m.FirstName()
	case hogeadministrator.FieldLastName:
		return m.LastName()
	case hogeadministrator.FieldEmail:
		return m.Email()
	case hogeadministrator.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HogeAdministratorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hogeadministrator.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case hogeadministrator.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case hogeadministrator.FieldFirstName:
		return m.OldFirstName(ctx)
	case hogeadministrator.FieldLastName:
		return m.OldLastName(ctx)
	case hogeadministrator.FieldEmail:
		return m.OldEmail(ctx)
	case hogeadministrator.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown HogeAdministrator field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HogeAdministratorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hogeadministrator.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case hogeadministrator.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case hogeadministrator.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case hogeadministrator.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case hogeadministrator.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case hogeadministrator.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown HogeAdministrator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HogeAdministratorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HogeAdministratorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HogeAdministratorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HogeAdministrator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HogeAdministratorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hogeadministrator.FieldFirstName) {
		fields = append(fields, hogeadministrator.FieldFirstName)
	}
	if m.FieldCleared(hogeadministrator.FieldLastName) {
		fields = append(fields, hogeadministrator.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HogeAdministratorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HogeAdministratorMutation) ClearField(name string) error {
	switch name {
	case hogeadministrator.FieldFirstName:
		m.ClearFirstName()
		return nil
	case hogeadministrator.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown HogeAdministrator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HogeAdministratorMutation) ResetField(name string) error {
	switch name {
	case hogeadministrator.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case hogeadministrator.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case hogeadministrator.FieldFirstName:
		m.ResetFirstName()
		return nil
	case hogeadministrator.FieldLastName:
		m.ResetLastName()
		return nil
	case hogeadministrator.FieldEmail:
		m.ResetEmail()
		return nil
	case hogeadministrator.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown HogeAdministrator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HogeAdministratorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.hoge != nil {
		edges = append(edges, hogeadministrator.EdgeHoge)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HogeAdministratorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hogeadministrator.EdgeHoge:
		if id := m.hoge; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HogeAdministratorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HogeAdministratorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HogeAdministratorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhoge {
		edges = append(edges, hogeadministrator.EdgeHoge)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HogeAdministratorMutation) EdgeCleared(name string) bool {
	switch name {
	case hogeadministrator.EdgeHoge:
		return m.clearedhoge
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HogeAdministratorMutation) ClearEdge(name string) error {
	switch name {
	case hogeadministrator.EdgeHoge:
		m.ClearHoge()
		return nil
	}
	return fmt.Errorf("unknown HogeAdministrator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HogeAdministratorMutation) ResetEdge(name string) error {
	switch name {
	case hogeadministrator.EdgeHoge:
		m.ResetHoge()
		return nil
	}
	return fmt.Errorf("unknown HogeAdministrator edge %s", name)
}
