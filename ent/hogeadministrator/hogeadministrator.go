// Code generated by ent, DO NOT EDIT.

package hogeadministrator

import (
	"time"

	"entgo.io/bug/ulid"
)

const (
	// Label holds the string label denoting the hogeadministrator type in the database.
	Label = "hoge_administrator"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// EdgeHoge holds the string denoting the hoge edge name in mutations.
	EdgeHoge = "hoge"
	// Table holds the table name of the hogeadministrator in the database.
	Table = "hoge_administrators"
	// HogeTable is the table that holds the hoge relation/edge.
	HogeTable = "hoge_administrators"
	// HogeInverseTable is the table name for the Hoge entity.
	// It exists in this package in order to avoid circular dependency with the "hoge" package.
	HogeInverseTable = "hoges"
	// HogeColumn is the table column denoting the hoge relation/edge.
	HogeColumn = "hoge_id"
)

// Columns holds all SQL columns for hogeadministrator fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldIsActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hoge_administrators"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hoge_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ID
)
