// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/bug/ent/hoge"
	"entgo.io/bug/ent/hogeadministrator"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HogeQuery is the builder for querying Hoge entities.
type HogeQuery struct {
	config
	limit                  *int
	offset                 *int
	unique                 *bool
	order                  []OrderFunc
	fields                 []string
	predicates             []predicate.Hoge
	withHogeAdministrators *HogeAdministratorQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HogeQuery builder.
func (hq *HogeQuery) Where(ps ...predicate.Hoge) *HogeQuery {
	hq.predicates = append(hq.predicates, ps...)
	return hq
}

// Limit adds a limit step to the query.
func (hq *HogeQuery) Limit(limit int) *HogeQuery {
	hq.limit = &limit
	return hq
}

// Offset adds an offset step to the query.
func (hq *HogeQuery) Offset(offset int) *HogeQuery {
	hq.offset = &offset
	return hq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hq *HogeQuery) Unique(unique bool) *HogeQuery {
	hq.unique = &unique
	return hq
}

// Order adds an order step to the query.
func (hq *HogeQuery) Order(o ...OrderFunc) *HogeQuery {
	hq.order = append(hq.order, o...)
	return hq
}

// QueryHogeAdministrators chains the current query on the "hoge_administrators" edge.
func (hq *HogeQuery) QueryHogeAdministrators() *HogeAdministratorQuery {
	query := &HogeAdministratorQuery{config: hq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hoge.Table, hoge.FieldID, selector),
			sqlgraph.To(hogeadministrator.Table, hogeadministrator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hoge.HogeAdministratorsTable, hoge.HogeAdministratorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(hq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Hoge entity from the query.
// Returns a *NotFoundError when no Hoge was found.
func (hq *HogeQuery) First(ctx context.Context) (*Hoge, error) {
	nodes, err := hq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hoge.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hq *HogeQuery) FirstX(ctx context.Context) *Hoge {
	node, err := hq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Hoge ID from the query.
// Returns a *NotFoundError when no Hoge ID was found.
func (hq *HogeQuery) FirstID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = hq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hoge.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hq *HogeQuery) FirstIDX(ctx context.Context) ulid.ID {
	id, err := hq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Hoge entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Hoge entity is found.
// Returns a *NotFoundError when no Hoge entities are found.
func (hq *HogeQuery) Only(ctx context.Context) (*Hoge, error) {
	nodes, err := hq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hoge.Label}
	default:
		return nil, &NotSingularError{hoge.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hq *HogeQuery) OnlyX(ctx context.Context) *Hoge {
	node, err := hq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Hoge ID in the query.
// Returns a *NotSingularError when more than one Hoge ID is found.
// Returns a *NotFoundError when no entities are found.
func (hq *HogeQuery) OnlyID(ctx context.Context) (id ulid.ID, err error) {
	var ids []ulid.ID
	if ids, err = hq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hoge.Label}
	default:
		err = &NotSingularError{hoge.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hq *HogeQuery) OnlyIDX(ctx context.Context) ulid.ID {
	id, err := hq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Hoges.
func (hq *HogeQuery) All(ctx context.Context) ([]*Hoge, error) {
	if err := hq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return hq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (hq *HogeQuery) AllX(ctx context.Context) []*Hoge {
	nodes, err := hq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Hoge IDs.
func (hq *HogeQuery) IDs(ctx context.Context) ([]ulid.ID, error) {
	var ids []ulid.ID
	if err := hq.Select(hoge.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hq *HogeQuery) IDsX(ctx context.Context) []ulid.ID {
	ids, err := hq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hq *HogeQuery) Count(ctx context.Context) (int, error) {
	if err := hq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return hq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (hq *HogeQuery) CountX(ctx context.Context) int {
	count, err := hq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hq *HogeQuery) Exist(ctx context.Context) (bool, error) {
	if err := hq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return hq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (hq *HogeQuery) ExistX(ctx context.Context) bool {
	exist, err := hq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HogeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hq *HogeQuery) Clone() *HogeQuery {
	if hq == nil {
		return nil
	}
	return &HogeQuery{
		config:                 hq.config,
		limit:                  hq.limit,
		offset:                 hq.offset,
		order:                  append([]OrderFunc{}, hq.order...),
		predicates:             append([]predicate.Hoge{}, hq.predicates...),
		withHogeAdministrators: hq.withHogeAdministrators.Clone(),
		// clone intermediate query.
		sql:    hq.sql.Clone(),
		path:   hq.path,
		unique: hq.unique,
	}
}

// WithHogeAdministrators tells the query-builder to eager-load the nodes that are connected to
// the "hoge_administrators" edge. The optional arguments are used to configure the query builder of the edge.
func (hq *HogeQuery) WithHogeAdministrators(opts ...func(*HogeAdministratorQuery)) *HogeQuery {
	query := &HogeAdministratorQuery{config: hq.config}
	for _, opt := range opts {
		opt(query)
	}
	hq.withHogeAdministrators = query
	return hq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Hoge.Query().
//		GroupBy(hoge.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hq *HogeQuery) GroupBy(field string, fields ...string) *HogeGroupBy {
	grbuild := &HogeGroupBy{config: hq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := hq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return hq.sqlQuery(ctx), nil
	}
	grbuild.label = hoge.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Hoge.Query().
//		Select(hoge.FieldCreatedAt).
//		Scan(ctx, &v)
func (hq *HogeQuery) Select(fields ...string) *HogeSelect {
	hq.fields = append(hq.fields, fields...)
	selbuild := &HogeSelect{HogeQuery: hq}
	selbuild.label = hoge.Label
	selbuild.flds, selbuild.scan = &hq.fields, selbuild.Scan
	return selbuild
}

func (hq *HogeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range hq.fields {
		if !hoge.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hq.path != nil {
		prev, err := hq.path(ctx)
		if err != nil {
			return err
		}
		hq.sql = prev
	}
	return nil
}

func (hq *HogeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Hoge, error) {
	var (
		nodes       = []*Hoge{}
		_spec       = hq.querySpec()
		loadedTypes = [1]bool{
			hq.withHogeAdministrators != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Hoge).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Hoge{config: hq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hq.withHogeAdministrators; query != nil {
		if err := hq.loadHogeAdministrators(ctx, query, nodes,
			func(n *Hoge) { n.Edges.HogeAdministrators = []*HogeAdministrator{} },
			func(n *Hoge, e *HogeAdministrator) {
				n.Edges.HogeAdministrators = append(n.Edges.HogeAdministrators, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hq *HogeQuery) loadHogeAdministrators(ctx context.Context, query *HogeAdministratorQuery, nodes []*Hoge, init func(*Hoge), assign func(*Hoge, *HogeAdministrator)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[ulid.ID]*Hoge)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HogeAdministrator(func(s *sql.Selector) {
		s.Where(sql.InValues(hoge.HogeAdministratorsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hoge_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "hoge_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hoge_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (hq *HogeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hq.querySpec()
	_spec.Node.Columns = hq.fields
	if len(hq.fields) > 0 {
		_spec.Unique = hq.unique != nil && *hq.unique
	}
	return sqlgraph.CountNodes(ctx, hq.driver, _spec)
}

func (hq *HogeQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := hq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (hq *HogeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hoge.Table,
			Columns: hoge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hoge.FieldID,
			},
		},
		From:   hq.sql,
		Unique: true,
	}
	if unique := hq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := hq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hoge.FieldID)
		for i := range fields {
			if fields[i] != hoge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hq *HogeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hq.driver.Dialect())
	t1 := builder.Table(hoge.Table)
	columns := hq.fields
	if len(columns) == 0 {
		columns = hoge.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hq.sql != nil {
		selector = hq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hq.unique != nil && *hq.unique {
		selector.Distinct()
	}
	for _, p := range hq.predicates {
		p(selector)
	}
	for _, p := range hq.order {
		p(selector)
	}
	if offset := hq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HogeGroupBy is the group-by builder for Hoge entities.
type HogeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hgb *HogeGroupBy) Aggregate(fns ...AggregateFunc) *HogeGroupBy {
	hgb.fns = append(hgb.fns, fns...)
	return hgb
}

// Scan applies the group-by query and scans the result into the given value.
func (hgb *HogeGroupBy) Scan(ctx context.Context, v any) error {
	query, err := hgb.path(ctx)
	if err != nil {
		return err
	}
	hgb.sql = query
	return hgb.sqlScan(ctx, v)
}

func (hgb *HogeGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range hgb.fields {
		if !hoge.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := hgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (hgb *HogeGroupBy) sqlQuery() *sql.Selector {
	selector := hgb.sql.Select()
	aggregation := make([]string, 0, len(hgb.fns))
	for _, fn := range hgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(hgb.fields)+len(hgb.fns))
		for _, f := range hgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(hgb.fields...)...)
}

// HogeSelect is the builder for selecting fields of Hoge entities.
type HogeSelect struct {
	*HogeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (hs *HogeSelect) Scan(ctx context.Context, v any) error {
	if err := hs.prepareQuery(ctx); err != nil {
		return err
	}
	hs.sql = hs.HogeQuery.sqlQuery(ctx)
	return hs.sqlScan(ctx, v)
}

func (hs *HogeSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := hs.sql.Query()
	if err := hs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
